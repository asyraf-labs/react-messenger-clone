{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","logged","setLogged","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","src","alt","class","Input","type","placeholder","onChange","event","target","value","onClick","FormControl","IconButton","disabled","color","preventDefault","add","timestamp","FieldValue","serverTimestamp","style","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c019f2b9.chunk.js","sourcesContent":["import React, { forwardRef } from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport './Message.css';\r\n\r\n// props.text\r\nconst Message = forwardRef(({ message, username }, ref) => {\r\n    const isUser = username === message.username;\r\n    return (\r\n        // all the user will use the message component\r\n        // but, if it is admin itself(person who login) , he/she will use 'message__user' component\r\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\r\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\r\n                <CardContent>\r\n                    <span className=\"message__username\">{!isUser && `${message.username || 'Unknown User'}`}</span>\r\n                    <Typography\r\n                        className=\"message__userMessage\"\r\n                        variant=\"h5\"\r\n                        component=\"h2\"\r\n                    >\r\n                        {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyDj83xiVnmXMSUmkisMrBjXij39Rm6k-S0\",\r\n    authDomain: \"messenger-react-clone.firebaseapp.com\",\r\n    databaseURL: \"https://messenger-react-clone.firebaseio.com\",\r\n    projectId: \"messenger-react-clone\",\r\n    storageBucket: \"messenger-react-clone.appspot.com\",\r\n    messagingSenderId: \"297261441377\",\r\n    appId: \"1:297261441377:web:121e0431ecc78bb229a520\",\r\n    measurementId: \"G-Q2JPTSHDHB\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport { IconButton, Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport './App.css';\n\nfunction App() {\n  // state (short term memory) => no refresh\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n  const [logged, setLogged] = useState(false);\n  // const [messages, setMessages] = useState([]);\n  // input = varialble name (the picece of memory in a state)\n\n  // console.log(input);\n  // console.log(messages);\n  // console.log(username);\n\n  // useState => variable in REACT\n  // useEffect => block of code that will excecuted based on condition\n\n  useEffect(() => {\n    // onSnapshot => when there are new document in database, onSnapshot will snap(camera) that new doucement\n    // real time capture the database\n    // listener\n    db.collection('messages')\n      .orderBy('timestamp', 'desc')\n      .onSnapshot((snapshot) => {\n        setMessages(snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() })));\n      });\n  }, []);\n\n  const login = () => {\n    setLogged(true);\n  }\n\n  // useEffect(() => {\n  //   // run code here...\n  //   // if [], this code runs ONCE when the app component load => load when page refresh\n\n  //   // const username = prompt('Please enter your name');\n  //   // setUsername(username);\n  //   setUsername(prompt('Please enter your name')); // the name will stored in username\n\n  // }, []); // condition (dependecies)\n\n  const sendMessage = (event) => {\n    event.preventDefault(); // prevent the refresh stuff !!\n    // all the logic to send a message goes\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    // we want to push what inside the input to the list\n    //setMessages([...messages, { username: username, text: input }]); // get all the messages and append new message after old messages\n    setInput(''); // clear the input value\n  };\n\n  return (\n    <div className=\"app\">\n      <img\n        className=\"app__logo\"\n        src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100%h=100\"\n        alt=\"logo\"\n      />\n      <h1>React Messenger App 🚀</h1>\n      {!logged &&\n        <div class=\"app__loginPage\">\n          <h2 className=\"app__textLogin\">Login</h2>\n          <div class=\"app__loginInput\">\n            <Input className=\"app__userInput\" type=\"text\" placeholder=\"Your name...\" onChange={event => setUsername(event.target.value)} />\n            <button onClick={login}>Confirm</button>\n          </div>\n        </div>\n      }\n      {logged &&\n        <h2 className=\"app__welcome\">Welcome <span class=\"app__username\">{username}</span> ❗❗</h2>\n      }\n\n      {logged &&\n        // {/* form give the Enter Button active */}\n        // {/* form refresh on submit => event.preventDefault() */}\n        <div class=\"app__formContainer\">\n          <form className=\"app__form\">\n            <FormControl className=\"app__formControl\">\n              <Input className=\"app__input\" placeholder=\"Enter a message...\" type=\"text\" value={input} onChange={event => setInput(event.target.value)} />\n              <IconButton\n                className=\"app__iconButton\"\n                disabled={!input}\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n                onClick={sendMessage}\n              >\n                <SendIcon />\n              </IconButton>\n            </FormControl>\n\n            {/* input field */}\n            {/* // <input type=\"text\" value={input} onChange={event => setInput(event.target.value)} /> */}\n\n            {/* Button */}\n            {/* <Button disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={sendMessage}>Send message</Button> */}\n          </form>\n        </div>\n\n      }\n      {/* to kick out the empty input => diable !input */}\n\n      {/* message themeselves */}\n\n      {logged &&\n        <FlipMove style={{ 'z-index': '-1' }}>\n          {\n            messages.map(({ id, message }) => (\n              <Message key={id} username={username} message={message} />\n              // <p>{message}</p>\n            ))\n          }\n\n        </FlipMove>\n\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}